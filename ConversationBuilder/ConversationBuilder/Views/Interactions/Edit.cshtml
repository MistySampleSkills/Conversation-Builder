@model ConversationBuilder.DataModels.Interaction

@{
	ViewData["Title"] = "Edit";
	Layout = "~/Views/Shared/_Layout.cshtml";
	TempData.Keep("Message");
}
@section Styles {
	<link rel="stylesheet" href="~/css/themes/@ViewBag.CssFile" />	
}


<h3>Editing interaction @Html.DisplayFor(model => model.Name)</h3>
<hr />
<h5 style="color:red">@ViewBag.Message</h5>

<div class="row">
	<div class="col-md-4">
		<form asp-action="Edit">
			<div asp-validation-summary="ModelOnly" class="text-danger"></div>
			<div class="form-group">
				<label asp-for="Name" class="control-label"></label>
				<label title="Try to keep your names descriptive and unique.">ℹ️</label>
				<input asp-for="Name" class="form-control" />
				<span asp-validation-for="Name" class="text-danger"></span>
			</div>

			<div class="form-group">
				<label asp-for="Animation"></label>
				<label title="Pick one from the list of animations you have already created.">ℹ️</label>
				<select asp-for="Animation" class="form-control">
					@foreach (KeyValuePair<string, string> item in @ViewBag.Animations)
					{
						<option value="@item.Key">@item.Value</option>
					}
				</select>
			</div>

			<div class="form-group">
				<input asp-for="ConversationId" class="form-control" value="@Model.ConversationId" type="hidden"> </input>
			</div>
			<div class="form-group">
				<label asp-for="InteractionFailedTimeout" class="control-label"></label>
				<label title="How long in seconds before the interaction will time out and go to the 'No interaction' default interaction.">ℹ️</label>
				<input asp-for="InteractionFailedTimeout" class="form-control" />
				<span asp-validation-for="InteractionFailedTimeout" class="text-danger"></span>
			</div>
				<div class="form-group">
				<div class="checkbox">
					<label>
						<input asp-for="StartListening" /> @Html.DisplayNameFor(model => model.StartListening)
						<label title="Start listening at start of interaction, will start after speech or audio, or immediately if neither.">ℹ️</label>
					</label>
				</div>
			</div>
			<div class="form-group">
				<div class="checkbox">
					<label>
						<input asp-for="AllowKeyPhraseRecognition" /> @Html.DisplayNameFor(model => model.AllowKeyPhraseRecognition)
						<label title="Allow 'Hey Misty' requests to be handled as speech triggers if Misty isn't speaking or already listening.">ℹ️</label>
					</label>
				</div>
			</div>
			<div class="form-group">
				<div class="checkbox">
					<label>
						<input asp-for="AllowConversationTriggers" /> @Html.DisplayNameFor(model => model.AllowConversationTriggers)
						<label title="Allow conversation triggers to be handled in this interaction after checking the interaction specific triggers.">ℹ️</label>
					</label>
				</div>
			</div>
			<div class="form-group">
				<div class="checkbox">
					<label>
						<input asp-for="ConversationEntryPoint" /> @Html.DisplayNameFor(model => model.ConversationEntryPoint)
						<label title="If selected, this interaction can be used as an entry point from another conversation, when mapping conversation groups.">ℹ️</label>
					</label>
				</div>
			</div>
			
			@if(ViewBag.ReadOnlyEntryPoint)
			{
				<div class="form-group">
					<input asp-for="ConversationEntryPoint" class="form-control" value="@Model.ConversationEntryPoint" type="hidden"> </input>
					<label asp-for="ConversationEntryPoint" /> @Html.DisplayNameFor(model => model.ConversationEntryPoint)						
					<label title="Cannot change. Entry point is in use in conversation group at this time.">ℹ️</label>
				</div>
			}
			else
			{
				<div class="form-group">
					<div class="checkbox">
						<label>
							<input asp-for="ConversationEntryPoint" /> @Html.DisplayNameFor(model => model.ConversationEntryPoint)
						</label>
					</div>
				</div>
			}
			
			@if(ViewBag.ShowBetaItems)
			{
				<div class="form-group">
					<div class="checkbox">
						<label>
							<input asp-for="UsePreSpeech" /> @Html.DisplayNameFor(model => model.UsePreSpeech)
						</label>
					</div>
				</div>
				<div class="form-group">
					<label asp-for="PreSpeechPhrases" class="control-label"></label>
					<textarea rows=5 asp-for="PreSpeechPhrases" class="form-control" > </textarea>
					<label title="Semicolon separated list of pre speech-phrases.">ℹ️</label>					
					<span asp-validation-for="PreSpeechPhrases" class="text-danger"></span>
				</div>
				
				<div class="form-group">
					<div class="checkbox">
						<label>
							<input asp-for="AllowVoiceProcessingOverride" /> @Html.DisplayNameFor(model => model.AllowVoiceProcessingOverride)
						</label>
					</div>
				</div>
				
				<div class="form-group">
					<label asp-for="ListenTimeout" class="control-label"></label>
					<label title="How long to listen in seconds before cancelling speech recording if no one has spoken. Maximum of 10 seconds.">ℹ️</label>
					<input asp-for="ListenTimeout" class="form-control" />
					<span asp-validation-for="ListenTimeout" class="text-danger"></span>
				</div>
				<div class="form-group">
					<label asp-for="SilenceTimeout" class="control-label"></label>
					<label title="How long to wait in seconds after speaking, before assuming they are done speaking. Maximum of 10 seconds.">ℹ️</label>
					<input asp-for="SilenceTimeout" class="form-control" />
					<span asp-validation-for="SilenceTimeout" class="text-danger"></span>
				</div>
			}
			<div class="form-group">
				<input type="submit" value="Save" class="btn btn-default" />
			</div>
		</form>
	</div>
</div>

<div>
		@Html.ActionLink("Back to List", "Index",  "Interactions", new { conversationId = Model.ConversationId})
</div>

@section Scripts {
	@{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
