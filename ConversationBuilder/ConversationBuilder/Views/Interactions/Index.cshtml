@model IEnumerable<ConversationBuilder.DataModels.Interaction>

@{
	ViewData["Title"] = "Index";
	Layout = "~/Views/Shared/_Layout.cshtml";
}
@section Styles {
	<link rel="stylesheet" href="~/css/themes/@ViewBag.CssFile" />	
}

<h3>Interactions for @ViewBag.ConversationName</h3>
<hr />
<h3 style="color:red">@ViewBag.Message</h3>
<p>
	@Html.ActionLink("Create New", "Create",  "Interactions", new {conversationId = @ViewBag.ConversationId})
</p>

<table class="table">
	<thead>
		<tr>
			<th>
				@Html.DisplayNameFor(model => model.Name)
			</th>
			<th>
				@Html.DisplayNameFor(model => model.Animation)
			</th>
			<th>
				# of Triggers
			</th>
			<th>
				Has unmapped options
			</th>
			<th>
				# of Options
			</th>
			<th>
				# of Skills
			</th>
			<th>
				@Html.DisplayNameFor(model => model.InteractionFailedTimeout)
			</th>
			<th>
				@Html.DisplayNameFor(model => model.ConversationEntryPoint)
			</th>
			<th></th>
		</tr>
	</thead>
	<tbody>
@if(Model != null)
{
	@foreach (var item in Model) {
			<tr>
				<td>
					@Html.DisplayFor(modelItem => item.Name)
				</td>
				@{
					KeyValuePair<string, string> nameKvp = ((IDictionary<string, string>)ViewBag.Animations).FirstOrDefault(x => x.Key == item.Animation);
					string name = item.Animation;
					if(nameKvp.Value != null)
					{
						name = nameKvp.Value;
					}
					int triggers = item.TriggerMap.Count();
					int triggerOptions = 0;
					bool hasUnMappedTrigger = false;
					foreach(KeyValuePair<string, IList<ConversationBuilder.DataModels.TriggerActionOption>> option in item.TriggerMap)
					{
						if(option.Value == null || option.Value.Count == 0)
						{
							hasUnMappedTrigger = true;							
						}
						else
						{
							triggerOptions += option.Value.Count();
						}
					}

					var skills = item.SkillMessages == null ? 0 : item.SkillMessages.Count();
				}
				<td>
					@name
				</td>
				<td>
					@triggers
				</td>
				<td>
					@hasUnMappedTrigger
				</td>
				<td>
					@triggerOptions
				</td>
				<td>
					@skills
				</td>
				<td>
					@Html.DisplayFor(modelItem => item.InteractionFailedTimeout)
				</td>
				<td>
					@Html.DisplayFor(modelItem => item.ConversationEntryPoint)
				</td>
				<td>
					@Html.ActionLink("Edit", "Edit", new { id=item.Id }) |
					@Html.ActionLink("Details", "Details", new { id=item.Id }) |
					@Html.ActionLink("Clone", "Clone", new { id=item.Id }) |
					@Html.ActionLink("Delete", "Delete", new { id=item.Id })
				</td>
			</tr>
	}
}

	</tbody>
</table>